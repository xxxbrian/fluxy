name: Rust Release

on:
  push:
    tags: [ "v*" ]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to (re)build & upload (e.g. v1.2.3)"
        required: true
        type: string
      dryrun:
        description: "Build only without uploading release assets"
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  release-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            build_tool: ""
          - target: aarch64-unknown-linux-gnu
            build_tool: cross
    env:
      RELEASE_TAG: ${{ inputs.tag != '' && inputs.tag || github.ref_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag != '' && format('refs/tags/{0}', inputs.tag) || '' }}
      - uses: dtolnay/rust-toolchain@stable
      - if: ${{ matrix.build_tool == 'cross' }}
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: fluxy
          target: ${{ matrix.target }}
          build-tool: ${{ matrix.build_tool }}
          tar: unix
          checksum: sha256
          ref: refs/tags/${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ github.event_name == 'workflow_dispatch' && inputs.dryrun || false }}

  release-macos:
    runs-on: macos-14
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        target: [ aarch64-apple-darwin, x86_64-apple-darwin ]
    env:
      RELEASE_TAG: ${{ inputs.tag != '' && inputs.tag || github.ref_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag != '' && format('refs/tags/{0}', inputs.tag) || '' }}
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add aarch64-apple-darwin x86_64-apple-darwin
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: fluxy
          target: ${{ matrix.target }}
          tar: unix
          checksum: sha256
          ref: refs/tags/${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ github.event_name == 'workflow_dispatch' && inputs.dryrun || false }}
