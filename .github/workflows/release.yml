name: Github Release

on:
  push:
    tags: [ "v*" ]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to (re)build & upload (e.g. v1.2.3)"
        required: true
        type: string
      bin:
        description: "Binary name (optional, for multi-bin workspaces)"
        required: false
        type: string
      dryrun:
        description: "If true, build only without uploading release assets"
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  release-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      RELEASE_TAG: ${{ inputs.tag != '' && inputs.tag || github.ref_name }}
      BIN_NAME: ${{ inputs.bin }}
      DRYRUN: ${{ inputs.dryrun }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag != '' && format('refs/tags/{0}', inputs.tag) || '' }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build (Linux amd64 + arm64)
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ env.BIN_NAME }}
          target: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
          tar: unix
          checksum: sha256
          include: README.md,LICENSE
          use-cross: true
          ref: refs/tags/${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ env.DRYRUN }}

  release-macos:
    runs-on: macos-14
    permissions:
      contents: write
    needs: release-linux
    env:
      RELEASE_TAG: ${{ inputs.tag != '' && inputs.tag || github.ref_name }}
      BIN_NAME: ${{ inputs.bin }}
      DRYRUN: ${{ inputs.dryrun }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag != '' && format('refs/tags/{0}', inputs.tag) || '' }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add macOS targets
        run: |
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Build (macOS arm64 + x64)
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ env.BIN_NAME }}
          target: aarch64-apple-darwin,x86_64-apple-darwin
          tar: unix
          checksum: sha256
          include: README.md,LICENSE
          ref: refs/tags/${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ env.DRYRUN }}
